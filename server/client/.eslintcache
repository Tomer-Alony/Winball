[{"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/index.js":"1","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/Theme.js":"2","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/App.js":"3","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/index.js":"4","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/reducers/index.js":"5","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/Groups.js":"6","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/games/Games.tsx":"7","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/Landing.js":"8","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/Header.js":"9","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/reducers/authReducer.js":"10","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/actions/index.js":"11","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupDialog.tsx":"12","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/GroupDisplay.tsx":"13","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/actions/types.js":"14","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/games/GameDisplay.tsx":"15","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/UserData.tsx":"16","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupForm/DataSelection.tsx":"17","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupForm/GroupTextInput.tsx":"18","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/EditGroup/EditGroupDialog.tsx":"19","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/scores/Scores.tsx":"20"},{"size":756,"mtime":1610696362609,"results":"21","hashOfConfig":"22"},{"size":1604,"mtime":1610696362599,"results":"23","hashOfConfig":"22"},{"size":795,"mtime":1612612971786,"results":"24","hashOfConfig":"22"},{"size":249,"mtime":1612612957816,"results":"25","hashOfConfig":"22"},{"size":210,"mtime":1608463456397,"results":"26","hashOfConfig":"22"},{"size":5746,"mtime":1612612289694,"results":"27","hashOfConfig":"22"},{"size":2167,"mtime":1610696362602,"results":"28","hashOfConfig":"22"},{"size":1007,"mtime":1612613372599,"results":"29","hashOfConfig":"22"},{"size":2174,"mtime":1612613536157,"results":"30","hashOfConfig":"22"},{"size":216,"mtime":1608463456397,"results":"31","hashOfConfig":"22"},{"size":227,"mtime":1608463456392,"results":"32","hashOfConfig":"22"},{"size":6771,"mtime":1612609403635,"results":"33","hashOfConfig":"22"},{"size":5582,"mtime":1610696362606,"results":"34","hashOfConfig":"22"},{"size":40,"mtime":1608463456393,"results":"35","hashOfConfig":"22"},{"size":2606,"mtime":1610696362601,"results":"36","hashOfConfig":"22"},{"size":942,"mtime":1610696362607,"results":"37","hashOfConfig":"22"},{"size":1894,"mtime":1612609403636,"results":"38","hashOfConfig":"22"},{"size":711,"mtime":1612609403636,"results":"39","hashOfConfig":"22"},{"size":7435,"mtime":1612609403635,"results":"40","hashOfConfig":"22"},{"size":448,"mtime":1612613116734,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"1y4s3kc",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/index.js",["94"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport Theme from './Theme';\n\nimport App from './components/App';\nimport reducers from './reducers';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport axios from 'axios';\nwindow.axios = axios;\n\nconst store = createStore(\n  reducers,\n  {},\n  compose(\n    applyMiddleware(reduxThunk),\n    window.devToolsExtension ? window.devToolsExtension() : (f) => f\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={Theme}>\n      <App/>\n    </ThemeProvider>\n  </Provider>,\n  document.querySelector('#root')\n);",["95","96"],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/Theme.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/App.js",["97"],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/index.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/reducers/index.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/Groups.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/games/Games.tsx",["98","99","100","101","102","103"],"import { makeStyles, Paper, TextField, Typography, WithStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Game } from '../../modles/Game';\nimport axios from 'axios';\nimport GameDisplay from './GameDisplay';\nimport FootballPic from '../../static/images/groups/football.png'\n\n\ninterface GameState {\n\n}\n\ninterface GameProps extends WithStyles {\n    game: Game\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        fontFamily: theme.typography.fontFamily,\n    },\n    container: {\n        maxHeight: '100%',\n    },\n}));\n\nexport default function Games(props: GameProps, state: GameState) {\n    const classes = useStyles();\n    const [isLoading, setIsLoading] = useState(true);\n    const [games, setGames] = useState([]);\n    const [teams, setTeams] = useState([]);\n\n    \n    useEffect(() => {\n        if (games.length === 0) {\n            const fetchData = async () => {\n                const gamesResult = await axios.get('/api/games');\n                const teamsReuslt = await axios.get('/api/teams');\n                \n                if(gamesResult && teamsReuslt) {\n                    setIsLoading(false);\n                    setGames(gamesResult.data);\n                    setTeams(teamsReuslt.data);\n                }\n            };\n\n            if(isLoading) fetchData();\n        }\n    }, []);\n    debugger\n    return (\n        <div style={{ textAlign: 'center' }} className={classes.root}>\n            <h1>Games</h1>\n            {games.map(game => (<GameDisplay teamAName={game.teamAId} \n                                             teamBName={game.teamBId} \n                                             startDate={game.startDate}\n                                             startTime={game.startTime}\n                                             picAPath={(teams.length != 0) ? teams.find((currTeam) => currTeam.name.includes(game.teamAId))?.picPath || FootballPic : \"\"}\n                                             picBPath={(teams.length != 0) ? teams.find((currTeam) => currTeam.name.includes(game.teamBId))?.picPath || FootballPic : \"\"}></GameDisplay>))}\n        </div>\n    );\n};",["104","105"],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/Landing.js",["106"],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/Header.js",["107"],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/reducers/authReducer.js",["108"],"import { FETCH_USER } from '../actions/types';\n\nexport default function (state = null, { type, payload }) {\n  switch (type) {\n    case FETCH_USER:\n      return payload || false;\n    default:\n      return state;\n  }\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/actions/index.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupDialog.tsx",["109","110"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { makeStyles, WithStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DataSelection from './AddGroupForm/DataSelection';\nimport Swal from 'sweetalert2'\n\nimport GroupTextInput from './AddGroupForm/GroupTextInput';\nimport { User } from '../../../modles/User';\nimport { League } from '../../../modles/League';\nimport { Group } from '../../../modles/Group';\n\n\ninterface AddGroupDialogProps {\n    handleNewGroup: (group: Group) => void\n}\n\ninterface AddGroupDialogState {\n    isOpen: boolean,\n    isLoading: boolean,\n    usersToAdd: User[],\n    usersData: User[],\n    leaguesData: League[],\n    loggedUser: User\n}\n\nconst styles = makeStyles((theme) => ({\n    addButton: {\n        position: 'fixed',\n        zIndex: 1,\n        bottom: '3%',\n        right: '2%',\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(2),\n            width: '25ch',\n        },\n    },\n}));\n\nexport default function UserData(props: AddGroupDialogProps, state: AddGroupDialogState) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [usersToAdd, setUsersToAdd] = useState([]);\n    const [usersData, setUsersData] = useState([]);\n    const [groupName, setGroupName] = useState('');\n    const [leaguesData, setLeaguesData] = useState([]);\n    const [leaguesToAdd, setLeaguesToAdd] = useState([]);\n    const [loggedUser, setLoggedUser] = useState(null);\n    const [description, setDescription] = useState('');\n\n    const classes = styles();\n\n    const { handleNewGroup } = props;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const players = axios.get(\n                '/api/players/all',\n            );\n            const leagues = axios.get(\n                '/api/leagues/'\n            )\n            const loggedUser = axios.get('/api/current_user');\n\n            const responses = await axios.all([players, leagues, loggedUser]);\n\n            if (responses.length === 3) {\n                setUsersData(responses[0].data.filter(user => user._id !== responses[2].data._id));\n                setLeaguesData(responses[1].data);\n                setLoggedUser(responses[2].data);\n                setIsLoading(false);\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'Something went wrong! We couldn`t fetch groups data',\n                    footer: 'Please try again later'\n                })\n            }\n\n        };\n\n        if (isLoading && isOpen) fetchData();\n    });\n\n    const handleDialog = () => {\n        setIsOpen(!isOpen);\n    }\n\n    const handleUsersChange = (users: (User | string)[]) => {\n        setUsersToAdd(users);\n    }\n\n    const handleOnNameChange = (name: string) => {\n        setGroupName(name);\n    }\n\n    const handleLeaguesChange = (leagues: League[]) => {\n        setLeaguesToAdd(leagues);\n    }\n\n    const handleDescChange = (desc: string) => {\n        setDescription(desc);\n    }\n\n    const handleSubmit = async () => {\n        usersToAdd.push(loggedUser);\n        const resp = await axios.put('/api/groups/add', {\n            newGroup: {\n                players: usersToAdd.map(user => {\n                    return user._id\n                }),\n                leaguesIds: leaguesToAdd.map((league) => { return league._id }),\n                name: groupName,\n                manager_id: loggedUser._id,\n                description: description\n            }\n        })\n\n        setIsOpen(!isOpen);\n\n        if (resp.status === 200) {\n            Swal.fire(\n                'Have fun!',\n                'You created a new group successfully',\n                'success'\n            )\n            handleNewGroup(resp.data);\n        } else {\n            Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'Something went wrong! We couldn`t add a new group',\n                footer: 'Please try again later'\n            })\n        }\n    }\n\n    return (\n        <>\n            <Fab color=\"primary\"\n                aria-label=\"add\"\n                className={classes.addButton}\n                onClick={handleDialog}>\n                <AddIcon />\n            </Fab>\n            <Dialog open={isOpen} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add new group</DialogTitle>\n                <DialogContent>\n                    {\n                        isLoading\n                            ? <CircularProgress />\n                            :\n                            <form className={classes.root}>\n                                <GroupTextInput label='Name' isFocused={true} handleChange={handleOnNameChange} />\n                                <GroupTextInput label='Description' isFocused={false} handleChange={handleDescChange} />\n                                <DialogContentText>\n                                    Select group participants:\n                                    </DialogContentText>\n                                <DataSelection \n                                    data={usersData}\n                                    selectedData={[]}\n                                    handleChange={handleUsersChange}\n                                    label='Participants' />\n                                <DialogContentText>\n                                    Select leagues:\n                                    </DialogContentText>\n                                <DataSelection \n                                    data={leaguesData}\n                                    selectedData={[]}\n                                    handleChange={handleLeaguesChange}\n                                    label='Leagues' />\n                            </form>\n                    }\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleDialog} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Add\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/GroupDisplay.tsx",["111","112","113"],"import React, { useEffect, useState } from \"react\";\nimport * as _ from 'lodash';\nimport axios from 'axios';\nimport { makeStyles, WithStyles, withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Group, PlayerMetadata, PlayerScores } from '../../../modles/Group';\nimport UserData from './UserData';\n\ninterface GroupState {\n    playersData: PlayerMetadata\n}\n\ninterface GroupProps extends WithStyles {\n    group: Group\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%'\n    },\n    container: {\n        maxHeight: '100%',\n    },\n    tableCell: {\n        width: 'calc(100%/6)'\n    }\n});\n\nconst columns = [\n    { id: 'player', label: 'Player', align: 'center' },\n    { id: 'games', label: 'Games' },\n    {\n        id: 'side',\n        label: 'Side',\n        align: 'right',\n        format: (value: any) => value.toLocaleString('en-US'),\n    },\n    {\n        id: 'bullseye',\n        label: 'Bullseye',\n        format: (value: any) => value.toFixed(2),\n    },\n    {\n        id: 'points',\n        label: 'Points',\n        format: (value: any) => value.toFixed(2),\n    }\n];\n\nexport default function GroupDisplay(props: GroupProps, state: GroupState) {\n    const [playersMetaData, setPlayersMetadata] = useState<PlayerMetadata>(new Map<string, any>());\n    const [isLoading, setIsLoading] = useState(true);\n\n    const { group } = props;\n    const classes = useStyles();\n\n    group.players = _.sortBy(group.players, ['points', 'bullseye', 'side']).reverse();\n    useEffect(() => {\n        if (group) {\n            const fetchData = async () => {\n                var result = await axios(\n                    '/api/players/', {\n                    method: 'POST',\n                    data: {\n                        playersIds: group.players.map((currPlayer: PlayerScores) => {\n                            return currPlayer.playerId;\n                        })\n                    }\n                }\n                );\n                var playersMap = new Map();\n                await result.data.map(player => {\n                    playersMap.set(player._id, player);\n                })\n\n                setPlayersMetadata(playersMap);\n                setIsLoading(false);\n            };\n\n            if(isLoading) fetchData();\n        }\n    }, []);\n\n    return (\n        <>\n            {isLoading\n                ? <CircularProgress />\n                : <Paper className={classes.root}>\n                    <TableContainer className={classes.container}>\n                        <Table stickyHeader aria-label=\"Players table\">\n                            <TableHead>\n                                <TableRow>\n                                    {columns.map((column) => (\n                                        <TableCell\n                                            key={column.id}\n                                            //@ts-ignore\n                                            style={{ width: 'calc(100%/6)' }}\n                                        >\n                                            {column.label}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {group.players.map((currPlayer) => {\n                                    const currPlayerMetadata = playersMetaData.get(currPlayer.playerId);\n                                    return (\n                                        <TableRow>\n                                            <TableCell key={'player' + currPlayer.playerId} className={classes.tableCell} >\n                                                <UserData name={currPlayerMetadata.displayName} picPath={currPlayerMetadata.picture} />\n                                            </TableCell>\n                                            <TableCell key={'games' + currPlayer.playerId} className={classes.tableCell}>\n                                                {currPlayer.games}\n                                            </TableCell>\n                                            <TableCell key={'side' + currPlayer.playerId} className={classes.tableCell}>\n                                                {currPlayer.side}\n                                            </TableCell>\n                                            <TableCell key={'bullseye' + currPlayer.playerId} className={classes.tableCell}>\n                                                {currPlayer.bullseye}\n                                            </TableCell>\n                                            <TableCell key={'points' + currPlayer.playerId} className={classes.tableCell}>\n                                                {currPlayer.points}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })\n                                }\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Paper>\n            }\n        </>\n    );\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/actions/types.js",[],"/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/games/GameDisplay.tsx",["114","115","116","117","118"],"import { makeStyles, Paper, TextField, Typography, WithStyles } from \"@material-ui/core\";\nimport FcbPic from '../../static/images/groups/Fcb.png'\nimport RealPic from '../../static/images/groups/Real.png'\nimport * as React from \"react\";\nimport moment from \"moment\";\n\ninterface GameDataState {\n\n}\n\ninterface GameDataProps {\n   teamAName: string,\n   teamBName: string,\n   startDate: Date,\n   startTime: Date,\n   picAPath: string,\n   picBPath: string\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        fontFamily: theme.typography.fontFamily,\n    },\n    container: {\n        maxHeight: '100%',\n    },\n    gameContainer: {\n        width: '100%',\n        paddingTop: '8px',\n        backgroundColor: '#e7e7de',\n        marginBottom: '5px'\n    },\n    details: {\n        flexDirection: 'row',\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '10px',\n        paddingBottom: '15px',\n        alignItems: 'center'\n    },\n    pics: {\n        width: '60px',\n        height: '60px',\n        marginLeft: '22px',\n        marginRight: '22px'\n    },\n    guess: {\n        width: '35px',\n        borderColor: 'red'\n    },\n    guessContent: {\n        justifyContent: 'space-between',\n        display: 'flex',\n        minWidth: '200px',\n        alignItems: 'center'\n    },\n    input: {\n        backgroundColor: 'white',\n    }\n}));\n\nexport default function GameDisplay(props: GameDataProps, state: GameDataState) {\n    const classes = useStyles();\n\n    const { teamAName, teamBName, startDate, startTime, picAPath, picBPath} = props;\n\n    return (\n        <>\n        <Paper className={classes.gameContainer}>\n            <div>{moment(startDate).format('YYYY-M-D')}</div>\n            <div>{moment(startTime).format('HH:mm')}</div>\n            <div className={classes.details}> \n                <Typography variant=\"body1\" gutterBottom>{teamAName}</Typography>\n                <img className={classes.pics} src={picAPath}></img>\n                <div className={classes.guessContent}>\n                    <TextField id=\"outlined-basic\" className={classes.guess} variant=\"outlined\" InputProps={{className: classes.input }}/>\n                    <Typography variant=\"body2\" gutterBottom>:</Typography>\n                    <TextField id=\"outlined-basic\" className={classes.guess} variant=\"outlined\" InputProps={{className: classes.input }}/>\n                </div>\n                <img className={classes.pics} src={picBPath}></img>\n                <Typography variant=\"body1\" gutterBottom>{teamBName}</Typography>\n            </div>\n        </Paper>\n        </>\n    );\n};","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/UserData.tsx",["119","120"],"import * as React from \"react\";\nimport { makeStyles, WithStyles, withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Typography } from \"@material-ui/core\";\n\n\ninterface UserDataState {\n\n}\n\ninterface UserDataProps {\n    picPath: string,\n    name: string\n}\n\nconst styles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n        fontFamily: \"Assitant\"\n    },\n    large: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n}));\n\n\n\nexport default function UserData(props: UserDataProps, state: UserDataState) {\n    const classes = styles();\n    const { name, picPath } = props;\n\n    return (\n        <div className={classes.root}>\n            <Avatar alt={name} src={picPath} className={classes.large} />\n            <Typography variant=\"overline\">{name}</Typography>\n        </div>\n    );\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupForm/DataSelection.tsx",["121"],"import React from 'react';\nimport { User } from '../../../../modles/User';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\ninterface DataSelectionProps {\n  data: any[],\n  selectedData: any[]\n  handleChange: (data: (any)[]) => void,\n  label: string\n}\n\ninterface DataSelectionState {\n}\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nexport default function DataSelection(props: DataSelectionProps, state: DataSelectionState) {\n\n  const { data, handleChange, label, selectedData } = props;\n  const selectedValues = data.filter((currData) => {\n    return selectedData.includes(currData._id);\n  })\n\n  return (\n    <>\n      <Autocomplete\n        multiple\n        id=\"checkboxes-tags-demo\"\n        options={data}\n        defaultValue={selectedValues}\n        disableCloseOnSelect\n        limitTags={4}\n        getOptionLabel={(option) => option.displayName}\n        getOptionSelected={(option, value) => {\n          return option.displayName === value.displayName;\n        }}\n        renderOption={(option, { selected }) => (\n          <React.Fragment>\n            <Checkbox\n              icon={icon}\n              checkedIcon={checkedIcon}\n              style={{ marginRight: 8 }}\n              checked={selected}\n            />\n            {option.displayName}\n          </React.Fragment>\n        )}\n        onChange={(event, value, reason) => {\n          handleChange(value);\n        }}\n        style={{ width: 500 }}\n        renderInput={(params) => (\n          <TextField {...params} variant=\"outlined\" label={label} placeholder={label} />\n        )}\n      />\n    </>\n  );\n}\n","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/GroupDisplay/AddGroupForm/GroupTextInput.tsx",["122","123","124"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n    import TextField from '@material-ui/core/TextField';\n\ninterface GroupTextInputProps {\n    handleChange: (name: string) => void,\n    label: string,\n    isFocused: boolean\n}\n\ninterface GroupsTextInputState {\n}\n\nexport default function GroupTextInput(props: GroupTextInputProps, state: GroupsTextInputState) {\n    const { handleChange, label, isFocused } = props;\n\n    return (\n            <TextField id=\"standard-required\"\n                label={label}\n                autoFocus={isFocused}\n                onChange={(e) =>\n                    handleChange(e.target.value)}\n            />\n        \n    );\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/groups/EditGroup/EditGroupDialog.tsx",["125","126","127"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { makeStyles, WithStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Swal from 'sweetalert2'\nimport TextField from '@material-ui/core/TextField';\nimport DataSelection from '../GroupDisplay/AddGroupForm/DataSelection';\n\nimport { Group } from '../../../modles/Group';\n\n\ninterface EditGroupProps {\n    isOpen: boolean,\n    handleIsOpen: (toggle: boolean) => void,\n    group: Group,\n    handleUpdatedGroup: (group: Group) => void\n}\n\ninterface EditGroupState {\n}\n\nconst styles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(2),\n            width: '25ch',\n        },\n    },\n}));\n\nexport default function UserData(props: EditGroupProps, state: EditGroupState) {\n    const { isOpen, handleIsOpen, group, handleUpdatedGroup } = props;\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [name, setName] = useState('');\n    const [desc, setDesc] = useState('');\n    const [players, setPlayers] = useState([]);\n    const [leagues, setLeagues] = useState([]);\n    const [usersData, setUsersData] = useState([]);\n    const [leaguesData, setLeaguesData] = useState([]);\n    const [loggedUser, setLoggedUser] = useState(null);\n\n    const classes = styles();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const playersPromise = axios.get(\n                '/api/players/all',\n            );\n            const leaguesPromise = axios.get(\n                '/api/leagues/'\n            )\n            const loggedUserPromise = axios.get('/api/current_user');\n\n            const responses = await axios.all([playersPromise,\n                leaguesPromise,\n                loggedUserPromise]);\n\n            if (responses.length === 3) {\n                setUsersData(responses[0].data.filter(user => user._id !== responses[2].data._id));\n                setLeaguesData(responses[1].data);\n                setLoggedUser(responses[2].data);\n                setName(group.name);\n                setDesc(group.description);\n                setPlayers(group.players);\n                setLeagues(group.leaguesIds);\n                setIsLoading(false);\n            } else {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'Something went wrong! We couldn`t fetch groups data',\n                    footer: 'Please try again later'\n                })\n            }\n\n        };\n\n        if (isLoading && isOpen) fetchData();\n    });\n\n    const handlePlayers = (players) => {\n        setPlayers(players);\n    }\n\n    const handleLeagues = (leagues) => {\n        setLeagues(leagues);\n    }\n\n\n    const handleSave = async () => {\n        const newPlayers = players.map(player => {\n            return player._id.toString();\n        });\n        newPlayers.push(loggedUser._id);\n        const originPlayers = group.players.map(player => {\n            return player.playerId.toString();\n        })\n\n        const updatedPlayers = group.players.filter(player => {\n            return (player.playerId.toString() === loggedUser._id ||\n                newPlayers.includes(player.playerId.toString()));\n        });\n\n        newPlayers.map(player => {\n            if (!originPlayers.includes(player)) {\n                updatedPlayers.push({\n                    playerId: player,\n                    bullseye: 0,\n                    points: 0,\n                    side: 0,\n                    games: 0\n                });\n            }\n        })\n\n        const resp = await axios.put('/api/groups/', {\n            updatedGroup: {\n                players: updatedPlayers,\n                leaguesIds: leagues,\n                name: name,\n                manager_id: loggedUser._id,\n                description: desc,\n                _id: group._id\n            }\n        })\n\n        handleIsOpen(false);\n\n        if (resp.status === 200) {\n            Swal.fire(\n                'We have a win!',\n                'Your group has been successfully updated.',\n                'success'\n            )\n\n            handleUpdatedGroup(resp.data);\n        } else {\n            Swal.fire({\n                icon: 'error',\n                title: 'Oops...',\n                text: 'Something went wrong! We couldn`t add a new group',\n                footer: 'Please try again later'\n            })\n        }\n    }\n\n    return (\n        <>\n            <Dialog open={isOpen} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Add new group</DialogTitle>\n                <DialogContent>\n                    {\n                        isLoading\n                            ? <CircularProgress />\n                            :\n                            <form className={classes.root}>\n                                <TextField id=\"standard-required\"\n                                    label='Group Name'\n                                    autoFocus={true}\n                                    value={name}\n                                    onChange={(e) =>\n                                        setName(e.target.value)}\n                                />\n                                <TextField id=\"standard-required\"\n                                    label='Group Description'\n                                    value={desc}\n                                    onChange={(e) =>\n                                        setDesc(e.target.value)}\n                                />\n                                <DialogContentText>\n                                    Group participants:\n                                </DialogContentText>\n                                <DataSelection\n                                    data={usersData}\n                                    selectedData={group.players.map(currPlayer => {\n                                        return currPlayer.playerId;\n                                    })}\n                                    handleChange={handlePlayers}\n                                    label='Group Participants' />\n                                <DialogContentText>\n                                    Group leagues:\n                                </DialogContentText>\n                                <DataSelection\n                                    data={leaguesData}\n                                    selectedData={group.leaguesIds}\n                                    handleChange={handleLeagues}\n                                    label='Group Leagues' />\n                            </form>\n                    }\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleIsOpen(false)} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSave} color=\"primary\">\n                        Update\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}","/Users/tomeralony/Desktop/Personal/projects/Winball/server/client/src/components/scores/Scores.tsx",[],{"ruleId":"128","severity":1,"message":"129","line":10,"column":10,"nodeType":"130","messageId":"131","endLine":10,"endColumn":24},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":11,"column":6,"nodeType":"138","endLine":11,"endColumn":8,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":1,"column":22,"nodeType":"130","messageId":"131","endLine":1,"endColumn":27},{"ruleId":"140","severity":1,"message":"142","line":1,"column":29,"nodeType":"130","messageId":"131","endLine":1,"endColumn":38},{"ruleId":"140","severity":1,"message":"143","line":1,"column":40,"nodeType":"130","messageId":"131","endLine":1,"endColumn":50},{"ruleId":"136","severity":1,"message":"144","line":49,"column":8,"nodeType":"138","endLine":49,"endColumn":10,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":58,"column":70,"nodeType":"148","messageId":"149","endLine":58,"endColumn":72},{"ruleId":"146","severity":1,"message":"147","line":59,"column":70,"nodeType":"148","messageId":"149","endLine":59,"endColumn":72},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":23,"column":6,"nodeType":"138","endLine":23,"endColumn":8,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"151","line":8,"column":22,"nodeType":"130","messageId":"131","endLine":8,"endColumn":35},{"ruleId":"152","severity":1,"message":"153","line":3,"column":1,"nodeType":"154","endLine":10,"endColumn":2},{"ruleId":"140","severity":1,"message":"155","line":3,"column":22,"nodeType":"130","messageId":"131","endLine":3,"endColumn":32},{"ruleId":"140","severity":1,"message":"156","line":3,"column":34,"nodeType":"130","messageId":"131","endLine":3,"endColumn":44},{"ruleId":"140","severity":1,"message":"156","line":4,"column":34,"nodeType":"130","messageId":"131","endLine":4,"endColumn":44},{"ruleId":"157","severity":1,"message":"158","line":79,"column":46,"nodeType":"159","messageId":"160","endLine":79,"endColumn":48},{"ruleId":"136","severity":1,"message":"161","line":89,"column":8,"nodeType":"138","endLine":89,"endColumn":10,"suggestions":"162"},{"ruleId":"140","severity":1,"message":"155","line":1,"column":52,"nodeType":"130","messageId":"131","endLine":1,"endColumn":62},{"ruleId":"140","severity":1,"message":"163","line":2,"column":8,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"140","severity":1,"message":"164","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":75,"column":17,"nodeType":"167","endLine":75,"endColumn":62},{"ruleId":"165","severity":1,"message":"166","line":81,"column":17,"nodeType":"167","endLine":81,"endColumn":62},{"ruleId":"140","severity":1,"message":"155","line":2,"column":22,"nodeType":"130","messageId":"131","endLine":2,"endColumn":32},{"ruleId":"140","severity":1,"message":"156","line":2,"column":34,"nodeType":"130","messageId":"131","endLine":2,"endColumn":44},{"ruleId":"140","severity":1,"message":"168","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"140","severity":1,"message":"169","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":22},{"ruleId":"140","severity":1,"message":"170","line":2,"column":24,"nodeType":"130","messageId":"131","endLine":2,"endColumn":34},{"ruleId":"140","severity":1,"message":"171","line":2,"column":36,"nodeType":"130","messageId":"131","endLine":2,"endColumn":41},{"ruleId":"140","severity":1,"message":"155","line":3,"column":22,"nodeType":"130","messageId":"131","endLine":3,"endColumn":32},{"ruleId":"140","severity":1,"message":"156","line":3,"column":34,"nodeType":"130","messageId":"131","endLine":3,"endColumn":44},{"ruleId":"157","severity":1,"message":"158","line":111,"column":31,"nodeType":"159","messageId":"160","endLine":111,"endColumn":33},"no-unused-vars","'createMuiTheme' is defined but never used.","Identifier","unusedVar","no-native-reassign",["172"],"no-negated-in-lhs",["173"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["174"],"@typescript-eslint/no-unused-vars","'Paper' is defined but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has missing dependencies: 'games.length' and 'isLoading'. Either include them or remove the dependency array.",["175"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["176"],"'ThemeProvider' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'WithStyles' is defined but never used.","'withStyles' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'group' and 'isLoading'. Either include them or remove the dependency array.",["177"],"'FcbPic' is defined but never used.","'RealPic' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'User' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"178","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [dispatch]",{"range":"185","text":"186"},"Update the dependencies array to be: [games.length, isLoading]",{"range":"187","text":"188"},{"range":"189","text":"186"},"Update the dependencies array to be: [group, isLoading]",{"range":"190","text":"191"},[357,359],"[dispatch]",[1370,1372],"[games.length, isLoading]",[593,595],[2681,2683],"[group, isLoading]"]